import random

import database as db
import profile # type: ignore
from models import User, Relationship, Topic, TopicToUser, TYPES_OF_RELATIONSHIP
from utils import *

import registration


@bot.message_handler(commands=['start'])
def start(message):
    query = User.select().where(User.user_id == message.chat.id)
    if not db.fetchall(query):
        keyboard = types.InlineKeyboardMarkup()

        reg_btn = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="registration")
        keyboard.add(reg_btn)

        with open('static/girl_greeting.jpeg', 'rb') as photo:
            text = f"–•—ç–π–æ—É, –ø—Ä–∏–≤–µ—Ç! {message.chat.first_name}, —è –≤–∏–∂—É —Ç—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω...\n" \
                   f"–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–†–æ–∑–º–∞—Ä–∏</b> –∏ —è –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π!\n" \
                   f"–°–æ –º–Ω–æ–π —Ç–µ–±—è –∂–¥—É—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –∫—É—á–∞ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π!\n" \
                   f"<b>–ß—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–Ω—Å —Ç–∞–ø–∞–π –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É</b>‚ÜòÔ∏è"

            bot.send_photo(message.chat.id, photo, caption=text, reply_markup=keyboard, parse_mode="HTML")
    else:
        show_menu(message)


@bot.message_handler(commands=['menu'])
@registration_check
def show_menu(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
    """

    keyboard = types.InlineKeyboardMarkup()

    find_friends_btn = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞", callback_data="menu|find_friend")
    show_friends_btn = types.InlineKeyboardButton("–î—Ä—É–∑—å—è", callback_data="menu|show_friends")
    show_requests_btn = types.InlineKeyboardButton("–ó–∞—è–≤–∫–∏", callback_data="menu|show_recieved")
    chat_btn = types.InlineKeyboardButton("–ß–∞—Ç", callback_data="menu|chat")

    keyboard.add(find_friends_btn)
    keyboard.row(show_friends_btn, show_requests_btn, chat_btn)

    text = (f"<b>üìã –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üìã</b>\n\n"
            f"–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å")

    bot.send_message(message.chat.id, text, reply_markup=keyboard, parse_mode="HTML")


@bot.message_handler(commands=['message'])
def message_to_friend(message):

    try:
        username = message.text.strip().split(" ")[1]

        content = " ".join(message.text.strip().split(" ")[2:])

        other_user = User.get(User.username == username)
        current_user = User.get_by_id(message.chat.id)

        is_friend = db.fetchall(Relationship.select().where(
                (Relationship.user_id == message.chat.id) &
                (Relationship.other_id == other_user.user_id) &
                (Relationship.relationship == TYPES_OF_RELATIONSHIP["Friend"])
            ))

        if is_friend:
            current_user_text = f"‚úÖ <i><u>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #<b>{other_user.username}</b></u></i>\n\n" \
                                f" >> {content}"
            bot.delete_message(message.chat.id, message.message_id-1)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, current_user_text, parse_mode="HTML")
            other_user_text = f"‚ÜôÔ∏è <i><u>–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #<b>{current_user.username}</b></u></i>\n\n" \
                              f" >> {content}"
            bot.send_message(other_user.user_id, other_user_text, parse_mode="HTML")
        else:
            text = "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º, –∞ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π"
            bot.send_message(message.chat.id, text)
    except IndexError as err:
        text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ —Ñ–æ—Ä–º–µ: \n" \
               "<code>/message –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è</code>"
        bot.send_message(message.chat.id, text, parse_mode="HTML")
    except User.DoesNotExist:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def message_to_friend_from_profile(message, user_id):
    try:
        other_user = User.get_by_id(user_id)
        current_user = User.get_by_id(message.chat.id)

        content = message.text.strip()

        current_user_text = f"‚úÖ <i><u>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #<b>{other_user.username}</b></u></i>\n\n" \
                            f" >> {content}"
        try:
            bot.delete_message(message.chat.id, message.message_id-1)
        except telebot.apihelper.ApiTelegramException:
            pass
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, current_user_text, parse_mode="HTML")
        other_user_text = f"‚ÜôÔ∏è <i><u>–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #<b>{current_user.username}</b></u></i>\n\n" \
                          f" >> {content}"
        bot.send_message(other_user.user_id, other_user_text, parse_mode="HTML")

    except User.DoesNotExist:
        bot.send_message(message.chat.id, "[–û—à–∏–±–∫–∞] –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


deffered_users = {}


def find_friend(message):

    tmp = deffered_users.copy()

    for user_id in tmp.keys():
        deffered_users[user_id] += 1

    for user_id, i in tmp.items():
        if i > 3:
            deffered_users.pop(user_id)

    topics_ids = list(map(lambda arr: arr[2], db.fetchall(TopicToUser.select().where(TopicToUser.user_id == message.chat.id))))

    known_users_id = list(map(lambda arr: arr[2],
                           db.fetchall(Relationship.select().where(
                               Relationship.user_id == message.chat.id)
                           )))

    users = []
    for topic_id in topics_ids:
        user_ids = list(map(lambda arr: arr[1],
                            db.fetchall(TopicToUser.select().where(TopicToUser.topic_id == topic_id)))
                        )
        for user_id in user_ids:
            users.append(User.get_by_id(user_id))

    suggested_users = [user for user in users if user.user_id not in known_users_id and user.user_id not in list(deffered_users.keys()) and user.user_id != message.chat.id]

    if not suggested_users:
        user_ids = list(map(lambda arr: arr[0],
                            db.fetchall(User.select()))
                        )

        for user_id in user_ids:
            users.append(User.get_by_id(user_id))

        users = set(users)
        suggested_users = [user for user in users if user.user_id not in known_users_id and user.user_id != message.chat.id]

    if not suggested_users:

        text = f"–£–≤—ã, –≤—ã –¥–æ–ª–∏—Å—Ç–∞–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞\n–ö–æ–≥–¥–∞ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, —Ç–æ –º—ã —Å—Ä–∞–∑—É –≤–∞—Å —Å –Ω–∏–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º)"
        bot.send_message(message.chat.id, text)


    ## –ò–Ω–∞—á–µ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    else:
        chosen_user = random.choice(suggested_users)

        keyboard = types.InlineKeyboardMarkup()

        request_btn = types.InlineKeyboardButton("‚úÖ", callback_data=f"find_friend|send_request|{chosen_user.user_id}")
        dont_know = types.InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data=f"find_friend|dont_know|{chosen_user.user_id}")
        reject_btn = types.InlineKeyboardButton("‚ùå", callback_data=f"find_friend|not_intrested|{chosen_user.user_id}")
        stop_btn = types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–µ–Ω—Ç—É", callback_data=f"reply|back_to_menu")

        keyboard.row(request_btn, dont_know, reject_btn)
        keyboard.add(stop_btn)

        profile.show(message, chosen_user.user_id, keyboard)


def show_anket(message, user_id):
    user = User.get_by_id(user_id)

    keyboard = types.InlineKeyboardMarkup()

    request_btn = types.InlineKeyboardButton("‚úÖ", callback_data=f"find_friend|send_request|{user.user_id}")
    reject_btn = types.InlineKeyboardButton("‚ùå", callback_data=f"find_friend|not_intrested|{user.user_id}")

    keyboard.row(request_btn, reject_btn)

    profile.show(message, user.user_id, keyboard)


reply_keyboard = types.InlineKeyboardMarkup()

back_to_menu_btn = types.InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="reply|back_to_menu")
continue_btn = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å >>", callback_data="reply|continue")
reply_keyboard.row(back_to_menu_btn, continue_btn)


def send_request(message, other_user_id):
    has_sent = bool(db.fetchall(Relationship.select().where(
        (Relationship.user_id == message.chat.id) & (Relationship.other_id == other_user_id))))

    other_user = User.get_by_id(other_user_id)
    current_user = User.get_by_id(message.chat.id)

    if has_sent:

        text = f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        bot.send_message(message.chat.id, text, parse_mode="HTML")

    else:

        has_recieved = bool(db.fetchall(Relationship.select().where(
            (Relationship.user_id == other_user_id) &
            (Relationship.other_id == message.chat.id) &
            (Relationship.relationship == TYPES_OF_RELATIONSHIP["Pending"])
        )))

        if has_recieved:

            Relationship.update(relationship=TYPES_OF_RELATIONSHIP["Friend"]).where(
                Relationship.user_id == other_user_id).execute()
            Relationship.create(user_id=message.chat.id,
                                other_id=other_user_id,
                                relationship=TYPES_OF_RELATIONSHIP["Friend"])

            text = f"–í—ã –∏ <b>{other_user.username}</b> —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è!\n–¢–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤–∞–º —Ä–∞–Ω–µ–µ –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è"
            bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=reply_keyboard)
            text = f"–í—ã –∏ <b>{current_user.username}</b> —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è!\n–¢–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤–∞–º —Ä–∞–Ω–µ–µ –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è"
            bot.send_message(other_user.user_id, text, parse_mode="HTML", reply_markup=reply_keyboard)

        else:

            Relationship.create(user_id=message.chat.id,
                                other_id=other_user_id,
                                relationship=TYPES_OF_RELATIONSHIP["Pending"])

            text = "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–Ø —É–≤–µ–¥–æ–º–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –≤–∞–º –æ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∏ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–º–µ—Ç –∑–∞—è–≤–∫—É –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –¥—Ä—É–∑—å—è–º–∏!))"
            bot.send_message(message.chat.id, text, reply_markup=reply_keyboard)

            keyboard = types.InlineKeyboardMarkup()

            show_btn = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ‚ÜòÔ∏è‚ÜòÔ∏è‚ÜòÔ∏è",
                                                  callback_data=f"reply|show_anket|{message.chat.id}")
            keyboard.add(show_btn)

            bot.send_message(other_user_id,
                             f"–ü—Ä–∏–≤–µ—Ç, —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥—Ä—É–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥ –Ω–∏–∫–æ–º <b>{current_user.username}</b>",
                             parse_mode="HTML", reply_markup=keyboard)


def dont_know(message, other_user_id):
    text = "–•–æ—Ä–æ—à–æ)\n–Ø –ø–æ—Ç–æ–º –µ—â—ë –ø–æ–¥–∫–∏–Ω—É –≤–∞–º —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å)"

    deffered_users[int(other_user_id)] = 0

    bot.send_message(message.chat.id, text, reply_markup=reply_keyboard)


def not_interested(message, other_user_id):
    has_sent = bool(db.fetchall(Relationship.select().where(
        (Relationship.user_id == message.chat.id) & (Relationship.other_id == other_user_id))))

    other_user = User.get_by_id(other_user_id)
    current_user = User.get_by_id(message.chat.id)

    if has_sent:

        text = f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        bot.send_message(message.chat.id, text, parse_mode="HTML")

    else:

        has_recieved = bool(db.fetchall(Relationship.select().where(
            (Relationship.user_id == other_user_id) &
            (Relationship.other_id == message.chat.id) &
            (Relationship.relationship == TYPES_OF_RELATIONSHIP["Pending"])
        )))
        if has_recieved:

            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{current_user.username}</b> –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–π –ª–µ–Ω—Ç–µ"
            bot.send_message(message.chat.id, text, parse_mode="HTML")

            Relationship.update(relationship=TYPES_OF_RELATIONSHIP["Denied"]).where(
                Relationship.user_id == other_user_id).execute()

        else:

            Relationship.create(user_id=other_user_id,
                                other_id=message.chat.id,
                                relationship=TYPES_OF_RELATIONSHIP["Denied"])

        Relationship.create(user_id=message.chat.id,
                            other_id=other_user_id,
                            relationship=TYPES_OF_RELATIONSHIP["Denied"])

        text = "–•–æ—Ä–æ—à–æ(\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –≤–∞—à–µ–π –ª–µ–Ω—Ç–µ"

        bot.send_message(message.chat.id, text, reply_markup=reply_keyboard)


@registration_check
def show_friends(message):
    query = db.fetchall(Relationship.select().where(Relationship.user_id == message.chat.id).where(Relationship.relationship == TYPES_OF_RELATIONSHIP["Friend"]))
    friends = {User.get_by_id(id).username: User.get_by_id(id).description for id in list(map(lambda arr: arr[2], query))}

    text = "<b>–í–æ—Ç —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è:</b>\n"
    if friends.items():
        for i, (name, description) in enumerate(friends.items(), 1):
            text += f"<b>{i}</b>. üë§ <b>–ò–º—è:</b> <code>{name}</code>\n" \
                    f" --{'--' * (i // 10)} üìÉ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        else:
            text += "–ù–∞–ø–∏—à–∏ –∏–º—è –¥—Ä—É–≥–∞, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"

        bot.send_message(message.chat.id, text, parse_mode="HTML")
        bot.register_next_step_handler(message, show_friends_respond_handler)
    else:
        text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–∑–µ–π, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≤–µ—Å—Ç–∏ –∏—Ö –≤ –ª–µ–Ω—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫—É–¥–∞ –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –∏–∑ /menu"
        bot.send_message(message.chat.id, text, parse_mode="HTML")


def show_friends_respond_handler(message):
    try:
        requested_user = User.get(User.username == message.text.strip())

        is_friend = db.fetchall(Relationship.select().where(
            (Relationship.user_id == message.chat.id) &
            (Relationship.other_id == requested_user.user_id) &
            (Relationship.relationship == TYPES_OF_RELATIONSHIP["Friend"])
        ))

        keyboard = types.InlineKeyboardMarkup()
        friend_chat_btn = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"find_friend|friend_chat|{requested_user.user_id}")
        delete_friend_btn = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞", callback_data=f"find_friend|delete_friend|{requested_user.user_id}")
        keyboard.add(friend_chat_btn, delete_friend_btn)

        if is_friend:
            profile.show(message, requested_user.user_id, keyboard)
        else:
            text = "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É —Ç–µ–±—è –≤ –¥—Ä—É–∑—å—è—Ö –Ω–µ—Ç"
            bot.send_message(message.chat.id, text)

    except User.DoesNotExist:
        text = "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        bot.send_message(message.chat.id, text)


def show_recieved_requests(message):
    query = db.fetchall(Relationship.select().where((Relationship.other_id == message.chat.id) &
                        (Relationship.relationship == TYPES_OF_RELATIONSHIP["Pending"])))
    recieved = {User.get_by_id(id).username: User.get_by_id(id).description for id in list(map(lambda arr: arr[1], query))}

    if recieved:
        text = "<b>–í–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –∑–∞—è–≤–∫–∏:</b>\n"

        for i, (name, description) in enumerate(recieved.items(), 1):
            text += f"<b>{i}</b>. üë§ <b>–ò–º—è:</b> <code>{name}</code>\n" \
                    f" --{'--' * (i // 10)} üìÉ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        else:
            text += "–ù–∞–ø–∏—à–∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"

        bot.send_message(message.chat.id, text, parse_mode="HTML")
        bot.register_next_step_handler(message, show_recieved_requests_respond_handler)
    else:
        text = f"–¢–µ–±–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è"
        bot.send_message(message.chat.id, text, parse_mode="HTML")


def show_recieved_requests_respond_handler(message):
    try:

        requested_user = User.get(User.username == message.text.strip())

        has_sent = db.fetchall(Relationship.select().where((Relationship.user_id == requested_user.user_id) &
                               (Relationship.other_id == message.chat.id) &
                               (Relationship.relationship == TYPES_OF_RELATIONSHIP["Pending"])))

        if has_sent:
            show_anket(message, requested_user.user_id)
        else:
            text = "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤–∞–º –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è"
            bot.send_message(message.chat.id, text)

    except User.DoesNotExist:
        text = "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        bot.send_message(message.chat.id, text)



def delete_friend(message, user_id):
    keyboard = types.InlineKeyboardMarkup()

    yes_btn = types.InlineKeyboardButton("–î–∞, —É–≤–µ—Ä–µ–Ω(-–∞)", callback_data=f"find_friend|confirm_deleting|{user_id}")
    no_btn = types.InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –±—É–¥—É", callback_data=f"find_friend|discard_deleting|{user_id}")

    keyboard.row(yes_btn, no_btn)
    text = f"{User.get_by_id(message.chat.id).username}, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {User.get_by_id(user_id).username} –∏–∑ –¥—Ä—É–∑–µ–π?"

    bot.send_message(message.chat.id, text, reply_markup=keyboard, parse_mode="HTML")


@bot.callback_query_handler(func=lambda callback: callback.data.startswith("menu"))
def menu_callback(callback):
    command = callback.data.split("|")[1]

    bot.delete_message(callback.message.chat.id, callback.message.message_id)

    if command == "find_friend":
        find_friend(callback.message)
    elif command == "show_friends":
        show_friends(callback.message)
    elif command == "show_recieved":
        show_recieved_requests(callback.message)
    elif command == "chat":
        text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ —Ñ–æ—Ä–º–µ: \n" \
               "<code>/message –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è</code>"
        bot.send_message(callback.message.chat.id, text, parse_mode="HTML")


@bot.callback_query_handler(func=lambda callback: callback.data.startswith("find_friend"))
def find_friend_callback(callback):
    command = callback.data.split("|")[1]
    user_id = callback.data.split("|")[2]

    if command == "send_request":
        send_request(callback.message, user_id)
    elif command == "dont_know":
        dont_know(callback.message, user_id)
    elif command == "not_intrested":
        not_interested(callback.message, user_id)
    elif command == "friend_chat":
        text = f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{User.get_by_id(user_id).username}</b>"
        bot.send_message(callback.message.chat.id, text, parse_mode="HTML")

        bot.register_next_step_handler(callback.message, message_to_friend_from_profile, user_id)
    elif command == "delete_friend":
        delete_friend(callback.message, user_id)
    elif command == "confirm_deleting":
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        Relationship.delete().where((Relationship.user_id == callback.message.chat.id) &
                                    (Relationship.other_id == user_id)).execute()
        Relationship.delete().where((Relationship.user_id == user_id) &
                                    (Relationship.other_id == callback.message.chat.id)).execute()
        bot.send_message(callback.message.chat.id,
                         f"–í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {User.get_by_id(user_id).username} –∏–∑ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π",
                         parse_mode="HTML")
        bot.send_message(user_id,
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User.get_by_id(callback.message.chat.id).username} —É–¥–∞–ª–∏–ª(-–∞) –≤–∞—Å –∏–∑ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π",
                         parse_mode="HTML")
    elif command == "discard_deleting":
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id,
                         "–Ø —É–≤–µ—Ä–µ–Ω —Ç—ã —Å–¥–µ–ª–∞–ª(-–∞) –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä)\n"
                         "–ò–Ω–∞—á–µ —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –±—ã–ª–æ –±—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –º–µ–Ω—å—à–µ",
                         parse_mode="HTML")


@bot.callback_query_handler(func=lambda callback: callback.data.startswith("reply"))
def reply_callback(callback):
    command = callback.data.split("|")[1]

    if command == "back_to_menu":
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        show_menu(callback.message)
    elif command == "continue":
        find_friend(callback.message)
    elif command == "show_anket":
        user_id = callback.data.split("|")[2]
        show_anket(callback.message, user_id)


bot.polling(none_stop=True)
