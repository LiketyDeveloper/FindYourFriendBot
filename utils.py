import telebot
from os import environ as env
from telebot import types

bot = telebot.TeleBot(env.get("TELEGRAM_BOT_TOKEN"))


def text_checker(func):
    def inner(*args):
        message = args[0]
        if message.content_type == "text":
            func(*args)
        else:
            incorrect_text = f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <u><b>–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç</b></u>\n" \
                                         f"–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏ –æ—à–∏–±–∫—É üòâ"
            bot.send_message(message.chat.id, incorrect_text, parse_mode="HTML")
            bot.register_next_step_handler(message, func, *args[1:])

    return inner


def space_checker(func):
    def inner(*args):
        message = args[0]

        if " " in message.text.strip():
            incorrect_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ <u><b>–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤</b></u>\n" \
                             f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞)"
            bot.send_message(message.chat.id, incorrect_text, parse_mode="HTML")
            bot.register_next_step_handler(message, func, *args[1:])
        else:
            func(*args)

    return inner


def photo_checker(func):
    def inner(*args):
        message = args[0]
        if message.content_type == "photo":
            func(*args)
        else:
            incorrect_description_text = f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <u><b>—Ñ–æ—Ç–æ</b></u>\n" \
                                         f"<b>–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ñ–∞–π–ª–æ–º, —Ç–æ —Ç–∞–∫ —Ç–æ–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç"
            bot.send_message(message.chat.id, incorrect_description_text, parse_mode="HTML")
            bot.register_next_step_handler(message, func, *args[1:])

    return inner


def length_checker(length=255):
    def outer(func):

        def inner(*args):
            message = args[0]
            if 0 < len(message.text.strip()) <= length:
                func(*args)
            else:
                incorrect_description_text = f"{message.chat.first_name}, –ø–æ–¥—É–º–∞–π –µ—â–µ!\n" \
                                             f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <u><b>–Ω–µ –±–æ–ª–µ–µ —á–µ–º –∏–∑ {length} –±—É–∫–≤!</b></u>\n"
                bot.send_message(message.chat.id, incorrect_description_text, parse_mode="HTML")
                bot.register_next_step_handler(message, func, *args[1:])

        return inner

    return outer


def registration_check(func):
    def inner(*args, **kwargs):
        from models import User

        message = args[0]
        ## If nothing given we use id of current user
        ## otherwise we use given user_id
        _user_id = message.chat.id if "user_id" not in kwargs.keys() else kwargs["user_id"]

        ## If user with this user_id exists we run function
        if User.get_or_none(User.user_id == _user_id):
            func(*args)

        ## Otherwise we give message that user with this user_id doesn't exist
        else:
            if message.chat.id == _user_id:
                keyboard = types.InlineKeyboardMarkup()

                reg_btn = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="registration")
                keyboard.add(reg_btn)

                text = f"{message.chat.first_name}, –≤—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç\n" \
                       f"–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, <b>–Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>"
                bot.send_message(message.chat.id, text, reply_markup=keyboard, parse_mode="HTML")
            else:
                text = f"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n" \
                       f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–¥–∞–ª–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –µ–≥–æ –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª"
                bot.send_message(message.chat.id, text, parse_mode="HTML")

    return inner


def show_list_buttons(array, c_data):

    keyboard = types.InlineKeyboardMarkup()

    btns = []

    for c_data_ending, value in array:
        btns.append(types.InlineKeyboardButton(f"{value}", callback_data=f"{c_data}|{c_data_ending}"))

    for i in range(0, len(btns), 2):
        if i + 1 == len(btns):
            keyboard.add(btns[i])
        else:
            keyboard.row(btns[i], btns[i + 1])

    return keyboard